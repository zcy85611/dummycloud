diff --git a/internal/app/claims.go b/internal/app/claims.go
index d49fd93..9c0a1c4 100644
--- a/internal/app/claims.go
+++ b/internal/app/claims.go
@@ -30,7 +30,7 @@ type UserClaims struct {
 type Auth0profile struct {
 	UserID        string `json:"UserID"`
 	IsSocial      bool
-	ClientID      string `json:"ClientID"`
+	ClientID      string `json:"ClientID,omitempty"`
 	Connection    string
 	Name          string `json:"Name"`
 	Nickname      string `json:"NickName"`
@@ -38,7 +38,7 @@ type Auth0profile struct {
 	FamilyName    string
 	Email         string
 	EmailVerified bool
-	Picture       string
+	Picture       string `json:"Picture,omitempty"`
 	CreatedAt     time.Time
 	UpdatedAt     time.Time
 }
diff --git a/internal/app/handlers.go b/internal/app/handlers.go
index 222db6f..b6bf5d6 100644
--- a/internal/app/handlers.go
+++ b/internal/app/handlers.go
@@ -2,6 +2,7 @@ package app
 
 import (
 	"bytes"
+	"crypto/rand"
 	"encoding/base64"
 	"encoding/json"
 	"fmt"
@@ -36,6 +37,31 @@ const (
 	maxRequestSize = 7000000000
 )
 
+func parseUAVersion(ua string) (program string, version float64, build uint64) {
+	flds := strings.Fields(ua)
+	ua_text := strings.Split(flds[0], "/")
+
+	program = ua_text[0]
+
+	if len(ua_text) >= 2 {
+		ua_version := strings.Split(ua_text[1], ".")
+
+		for i, v := range ua_version {
+			if n, err := strconv.ParseUint(v, 10, 64); err == nil {
+				if i == 3 {
+					build = n
+				} else if i == 0 {
+					version += float64(n)
+				} else {
+					version += float64(n) / 1000.0 * float64(i)
+				}
+			}
+		}
+	}
+
+	return
+}
+
 func (app *App) getDeviceClaims(c *gin.Context) (*DeviceClaims, error) {
 	token, err := common.GetToken(c)
 	if err != nil {
@@ -145,27 +171,43 @@ func (app *App) newUserToken(c *gin.Context) {
 	scopes := []string{"intgr", "screenshare", "hwcmail:-1", "mail:-1"}
 
 	if user.Sync15 {
-		log.Info("Using sync 1.5")
-		scopes = append(scopes, syncNew)
+		_, uaversion, _ := parseUAVersion(c.Request.Header.Get("user-agent"))
+		if uaversion == 0.0 || uaversion > 3.006 {
+			log.Info("Using sync 1.5 fox")
+			scopes = append(scopes, syncNew3)
+		} else {
+			log.Info("Using sync 1.5 tortoise (consider upgrading your rm/app)")
+			scopes = append(scopes, syncNew)
+		}
 	} else {
 		scopes = append(scopes, syncDefault)
 	}
 	scopesStr := strings.Join(scopes, " ")
 	log.Info("setting scopes: ", scopesStr)
+
+	jti := make([]byte, 3)
+	_, err = rand.Read(jti)
+	if err != nil {
+		badReq(c, err.Error())
+		return
+	}
+	jti = append([]byte{'r', 'M', '-'}, jti...)
+	jti = append(jti, '/', 'E')
+
 	now := time.Now()
-	expirationTime := now.Add(24 * time.Hour)
+	expirationTime := now.Add(3 * time.Hour)
 	claims := &UserClaims{
 		Profile: Auth0profile{
 			UserID:        deviceToken.UserID,
 			IsSocial:      false,
 			Connection:    "Username-Password-Authentication",
-			Name:          user.Name,
+			Name:          user.Email,
 			Nickname:      user.Nickname,
+			GivenName:     user.Name,
 			Email:         fmt.Sprintf("%s (via %s)", user.Email, app.cfg.StorageURL),
 			EmailVerified: true,
-			Picture:       "image.png",
-			CreatedAt:     time.Now(),
-			UpdatedAt:     time.Now(),
+			CreatedAt:     user.CreatedAt,
+			UpdatedAt:     user.UpdatedAt,
 		},
 		DeviceDesc: deviceToken.DeviceDesc,
 		DeviceID:   deviceToken.DeviceID,
@@ -175,10 +217,9 @@ func (app *App) newUserToken(c *gin.Context) {
 			ExpiresAt: expirationTime.Unix(),
 			NotBefore: now.Unix(),
 			IssuedAt:  now.Unix(),
-			Subject:   "rM User Token",
+			Subject:   deviceToken.UserID,
 			Issuer:    "rM WebApp",
-			Id:        user.ID,
-			Audience:  APIUsage,
+			Id:        base64.StdEncoding.EncodeToString(jti),
 		},
 		Version: tokenVersion,
 	}
@@ -749,6 +790,21 @@ func (app *App) syncGetRootV3(c *gin.Context) {
 	})
 }
 
+func (app *App) blobStorageRead(c *gin.Context) {
+	uid := c.GetString(userIDKey)
+	blobID := common.ParamS(fileKey, c)
+
+	reader, _, size, err := app.blobStorer.LoadBlob(uid, blobID)
+	if err != nil {
+		log.Error(err)
+		c.AbortWithStatus(http.StatusInternalServerError)
+		return
+	}
+	defer reader.Close()
+
+	c.DataFromReader(http.StatusOK, size, "application/octet-stream", reader, nil)
+}
+
 func (app *App) integrationsGetMetadata(c *gin.Context) {
 	var metadata messages.IntegrationMetadata
 	metadata.Thumbnail = ""
diff --git a/internal/app/middleware.go b/internal/app/middleware.go
index e27b8bd..fbbda09 100644
--- a/internal/app/middleware.go
+++ b/internal/app/middleware.go
@@ -18,6 +18,7 @@ const (
 	requestLog  = "[requestlogging-middleware]"
 	syncDefault = "sync:default"
 	syncNew     = "sync:tortoise"
+	syncNew3    = "sync:fox"
 )
 
 func (app *App) authMiddleware() gin.HandlerFunc {
@@ -35,7 +36,7 @@ func (app *App) authMiddleware() gin.HandlerFunc {
 
 		var isSync15 = false
 		for _, s := range scopes {
-			if s == syncNew {
+			if s == syncNew || s == syncNew3 {
 				isSync15 = true
 				break
 			}
diff --git a/internal/app/routes.go b/internal/app/routes.go
index 88d49b3..aaea245 100644
--- a/internal/app/routes.go
+++ b/internal/app/routes.go
@@ -130,5 +130,6 @@ func (app *App) registerRoutes(router *gin.Engine) {
 
 		authRoutes.GET("/sync/v3/root", app.syncGetRootV3)
 		authRoutes.PUT("/sync/v3/root", app.syncUpdateRootV3)
+		authRoutes.GET("/sync/v3/files/:"+fileKey, app.blobStorageRead)
 	}
 }
